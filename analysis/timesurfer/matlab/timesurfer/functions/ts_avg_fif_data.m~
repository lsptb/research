function [output_data] = ts_avg_fif_data(datafile,varargin);
% [output_data] = ts_avg_fif_data(datafile,[options]);
%
% Usage:
%  [output_data] = ts_avg_fif_data(datafile, 'key1', value1,...);
%
% Required input:
%  datafile - full or relative path name of Neuromag fif raw data file
%
% Optional parameters:
%  'evnts'     - [struct] event structure with the following fields:
%     evnts.type      = string (e.g. trigger, skip, reject, manual)
%     evnts.latency   = expressed in samples, first sample of file is 1
%     evnts.condition = numeric event code
%     evnts.duration  = expressed in samples
%  'hdr'        - [struct] hdr structure with the following fields:
%     hdr.sfreq           sampling frequency
%     hdr.nChans          number of channels
%     hdr.nSamples        number of samples per buffer
%     hdr.tfirst          first time point in file
%     hdr.tlast           last time point in file
%     hdr.nBuffs          number of buffers in file (not including skips)
%     hdr.sensor          structure containing sensor information
%
%   N.B. if evnts or hdr structures are not supplied, will read events
%     and header info from raw data file (this can be time consuming)
%     see ts_read_fif_events and ts_read_fif_header
%
%  'prestim_dur'  - duration of prestimulus period (msec)
%     { default: 100 }
%  'poststim_dur' - duration of poststimulus period (msec)
%     { default: 400 }
%  'stim_delay' - duration of stimulus onset delay after trigger (msec)
%     { default: 0 }
%  'badchans'    - vector of bad channel indices
%     { default: [] }
%  'badchanfile' - name of text file containing bad channel labels
%    {default: []}
%  'bandpass'    - [1|0] Toggle bandpass frequency filter
%     { default: 0 }
%  'bandpass_low_cf'  - low cutoff frequency (high-pass filter) (Hz)
%     { default: 0 }
%  'bandpass_low_tb'  - low cutoff transition band (Hz)
%     { default: 0 }
%  'bandpass_high_cf' - high cutoff frequency (low-pass filter) (Hz)
%     { default: 100 }
%  'bandpass_high_tb' - high cutoff transition band (Hz)
%     { default: 0 }
%  'dsfact'  - downsampling factor -- must be an integer
%     data is downsampled to lower sampling frequency
%     e.g. original sampling freq = 1000, dsfact = 4,
%         resulting sampling freq = 250
%     { default: 1 (no downsampling) }
%  'detrend_events' - [1|0] Toggle linear trend removal
%    { default: 1 }
%  'baseline_sub' - [1|0] Toggle subtract mean of baseline period
%    { default: 1 }
%  'baseline_start' - start time of baseline period (msec)
%     relative to trigger onset; negative times occur before trigger
%     { default: -Inf } (start at beginning of prestimulus period)
%  'baseline_end'   - end time of baseline period (msec)
%     relative to trigger onset; negative times occur before trigger
%     { default: 0 } (end at trigger onset)
%  'ncov_ex_evnts' - vector of event codes that should not
%     be used in calculating the noise covariance matrix
%     { default: [] }
%  'reject_mag'  - automatic rejection threshold for magnetometer channels (fT)
%     if 0, rejection based on magnetometers is disabled
%     { default: 6000 }
%  'reject_grad' - automatic rejection threshold for gradiometer channels (fT/cm)
%     if 0, rejection based on gradiometers is disabled
%     { default: 3000 }
%  'reject_eeg' - automatic rejection threshold for eeg channels (uV)
%     if 0, rejection based on eeg is disabled
%     { default: 0 }
%  'reject_eog' - automatic rejection threshold for eog channel (uV)
%     if 0, rejection based on eog is disabled
%     { default: 200 }
%  'readtrans'  - [1|0] Toggle read device2head transform from fif file
%     if not found in fif file, will cause core dump
%     { default: 1 }
%  'max_num_trials' - maximum number of trials per condition
%    {default: Inf} (infinite)
%  'save_epochs' - [1|0] instead of calculating averages, return structure
%     containing epochs (single trial time courses)
%     { default: 0 }
%
% Output:
%   avg_data - structure containing the following fields:
%      num_sensors    (int)
%      sfreq          (double)
%      sensor_info    (struct)
%        type         (string)
%        label        (string)
%        loc          (4x4 matrix of doubles)
%        badchan      (int: 0 or 1)
%      coor_trans     (struct)
%        device2head  (4x4 matrix of doubles) (or empty)
%        mri2head     (4x4 matrix of doubles) (or empty)
%      averages       (struct)
%        event_code   (int)
%        num_trials   (int)
%        num_rejects  (struct)
%          mag        (int)
%          grad       (int)
%          eeg        (int)
%          eog        (int)
%          manual     (int)
%        time         (vector of doubles) (in msec)
%        data         (matrix of doubles) (num_sensors x num samples)
%        stdev        (matrix of doubles) (num_sensors x num samples)
%      noise          (struct)
%        num_trials   (int)
%        num_samples  (int)
%        covar        (matrix of doubles) (num_sensors x num_sensors)
%
%   epoch_data - structure containing the following fields:
%      num_sensors    (int)
%      sfreq          (double)
%      sensor_info    (struct)
%        type         (string)
%        label        (string)
%        loc          (4x4 matrix of doubles)
%        badchan      (int: 0 or 1)
%      coor_trans     (struct)
%        device2head  (4x4 matrix of doubles) (or empty)
%        mri2head     (4x4 matrix of doubles) (or empty)
%      epochs         (struct)
%        event_code   (int)
%        num_trials   (int)
%        num_rejects  (struct)
%          mag        (int)
%          grad       (int)
%          eeg        (int)
%          eog        (int)
%          manual     (int)
%        time         (vector of doubles) (in msec)
%        data         (matrix of doubles) (num_sensors x num samples x num_trials)
%      noise          (struct)
%        num_trials   (int)
%        num_samples  (int)
%        covar        (matrix of doubles) (num_sensors x num_sensors)
%
%
% Note on order of operations:
%  When specified (i.e. bandpass=1), filtering is performed first.
%     If filtering is done, detrending is done first regardless of whether
%     detrend_events=1.
%  Downsampling is then performed (if dsfact>1),
%    followed by detrending (if detrend_events=1).
%    and finally baseline correction (if baseline_sub=1),
%  Automatic artifact rejection is then done, followed by averaging.
%
%  created:       04/18/06   by Don Hagler
%  last modified: 08/05/09   by Don Hagler
%

%% todo: forceflag
%% todo: switch to mmil_args2parms
%% todo: trigchan input

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DEF_PRESTIM_DUR = 100;
DEF_POSTSTIM_DUR = 400;
DEF_STIM_DELAY = 0;
PRESCALE_MAG = 10^15;  % to fT
PRESCALE_GRAD = 10^13; % to fT/cm
PRESCALE_EEG = 10^6;   % to uV
PRESCALE_EOG = 10^6;   % to uV
DEF_REJECT_MAG = 6000;
DEF_REJECT_GRAD = 3000;
DEF_REJECT_EEG = 0;
DEF_REJECT_EOG = 200;
DEF_BASELINE_START = -Inf;
DEF_BASELINE_END = 0;
MAX_NOISE_SAMPLES = 5000;
DEF_BP_LOW_CF = 0;
DEF_BP_LOW_TB = 0;
DEF_BP_HIGH_CF = 100;
DEF_BP_HIGH_TB = 0;

SKIP_LENGTH = 100; % do not change -- must be consistent with ts_read_fif_data

concat_ncov_flag = 0; % concatenate noise before calculating noise covar
                      % or calculate noise covar for each trial and then avg

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if (~mmil_check_nargs(nargin,1)) return; end;

output_data = [];

if(~exist(datafile,'file'))
  error('datafile %s not found',datafile);
end

try
  options = varargin;
  for index = 1:length(options)
      if iscell(options{index}) & ~iscell(options{index}{1}), options{index} = { options{index} }; end;
  end;
  if ~isempty( varargin ), g=struct(options{:}); 
  else g = []; end;
catch
  error('calling convention {''key'', value, ... } error');
end;

try, g.evnts;           catch, g.evnts          = [];                 end;
try, g.hdr;             catch, g.hdr            = [];                 end;
try, g.prestim_dur;     catch, g.prestim_dur    = DEF_PRESTIM_DUR;    end;
try, g.poststim_dur;    catch, g.poststim_dur   = DEF_POSTSTIM_DUR;   end;
try, g.detrend_events;  catch, g.detrend_events = 1;               end;
try, g.baseline_sub;    catch, g.baseline_sub   = 1;               end;
try, g.baseline_start;  catch, g.baseline_start = DEF_BASELINE_START; end;
try, g.baseline_end;    catch, g.baseline_end   = DEF_BASELINE_END;   end;
try, g.stim_delay;      catch, g.stim_delay     = DEF_STIM_DELAY;     end;
try, g.badchans;        catch, g.badchans       = [];                 end;
try, g.badchanfile;     catch, g.badchanfile    = [];                 end;
try, g.reject_mag;      catch, g.reject_mag     = DEF_REJECT_MAG;     end;
try, g.reject_grad;     catch, g.reject_grad    = DEF_REJECT_GRAD;    end;
try, g.reject_eeg;      catch, g.reject_eeg     = DEF_REJECT_EEG;     end;
try, g.reject_eog;      catch, g.reject_eog     = DEF_REJECT_EOG;     end;
try, g.readtrans;       catch, g.readtrans      = 1;               end;
try, g.bandpass;        catch, g.bandpass       = 0;              end;
try, g.bandpass_low_cf; catch, g.bandpass_low_cf  = DEF_BP_LOW_CF;    end;
try, g.bandpass_low_tb; catch, g.bandpass_low_tb  = DEF_BP_LOW_TB;    end;
try, g.bandpass_high_cf;catch, g.bandpass_high_cf = DEF_BP_HIGH_CF;   end;
try, g.bandpass_high_tb;catch, g.bandpass_high_tb = DEF_BP_HIGH_TB;   end;
try, g.dsfact;          catch, g.dsfact         = 1;                  end;
try, g.ncov_ex_evnts;   catch, g.ncov_ex_evnts  = [];                 end;
try, g.max_num_trials;  catch, g.max_num_trials = Inf;                end;
try, g.save_epochs;     catch, g.save_epochs    = 0;                  end;

gfields = fieldnames(g);
for index=1:length(gfields)
   switch gfields{index}
   case {'evnts' 'hdr' 'prestim_dur' 'poststim_dur' 'stim_delay' 'badchans'...
         'detrend_events' 'baseline_start' 'baseline_end' 'baseline_sub'...
         'reject_mag' 'reject_grad' 'reject_eeg' 'reject_eog'...
         'readtrans' 'bandpass' 'bandpass_low_cf' 'bandpass_low_tb'...
         'bandpass_high_cf' 'bandpass_high_tb' 'dsfact'...
         'ncov_ex_evnts' 'max_num_trials' 'save_epochs' 'badchanfile'},;
   otherwise, error([mfilename ': unrecognized option: ''' gfields{index} '''' ]);
   end;
end;

% get rid of options struct
evnts = g.evnts;
hdr = g.hdr;
prestim_dur = g.prestim_dur;
poststim_dur = g.poststim_dur;
baseline_sub = g.baseline_sub;
baseline_start = g.baseline_start;
baseline_end = g.baseline_end;
stim_delay = g.stim_delay;
badchans = g.badchans;
badchanfile = g.badchanfile;
reject_mag = g.reject_mag;
reject_grad = g.reject_grad;
reject_eeg = g.reject_eeg;
reject_eog = g.reject_eog;
bandpass = g.bandpass;
bandpass_low_cf = g.bandpass_low_cf;
bandpass_low_tb = g.bandpass_low_tb;
bandpass_high_cf = g.bandpass_high_cf;
bandpass_high_tb = g.bandpass_high_tb;
dsfact = g.dsfact;
ncov_ex_evnts = g.ncov_ex_evnts;
max_num_trials = g.max_num_trials;
save_epochs = g.save_epochs;
readtrans = g.readtrans;
detrend_events = g.detrend_events;

% reject bad parameters
if length(prestim_dur)~=1 | ~isnumeric(prestim_dur) | prestim_dur<0
  error('prestim dur must be a single positive number');
end;
if length(poststim_dur)~=1 | ~isnumeric(poststim_dur) | poststim_dur<0
  error('poststim dur must be a single positive number');
end;
if length(stim_delay)~=1 | ~isnumeric(stim_delay) | stim_delay<0
  error('stim delay must be a single positive number');
end;
if baseline_sub
  if length(baseline_start)~=1 | ~isnumeric(baseline_start)
    error('baseline_start must be a single number');
  end;
  if length(baseline_end)~=1 | ~isnumeric(baseline_end)
    error('baseline_end must be a single number');
  end;
end;

if length(dsfact)~=1 | ~isnumeric(dsfact) | dsfact < 1 | ~isint(dsfact)
  error('dsfact must be a single integer >= 1');
end;
if bandpass 
  if length(bandpass_low_cf)~=1 | ~isnumeric(bandpass_low_cf)
    error('bandpass_low_cf must be a single positive number');
  end;
  if length(bandpass_low_tb)~=1 | ~isnumeric(bandpass_low_tb)
    error('bandpass_low_tb must be a single positive number');
  end;
  if length(bandpass_high_cf)~=1 | ~isnumeric(bandpass_high_cf)
    error('bandpass_high_cf must be a single positive number');
  end;
  if length(bandpass_high_tb)~=1 | ~isnumeric(bandpass_high_tb)
    error('bandpass_high_tb must be a single positive number');
  end;

  if bandpass_low_cf > bandpass_high_cf
    error('low cutoff freq must be less than high cutoff freq');
  end;
  if bandpass_high_tb < 0, bandpass_high_tb=0; end;
  if bandpass_low_tb < 0, bandpass_low_tb=0; end;
end;

% optionally read events and header (if not supplied on command line)
if isempty(evnts)
  % read events
  fprintf('%s: reading events for %s...\n',mfilename,datafile);
  [hdr,evnts]=ts_read_fif_events(datafile);
elseif isempty(hdr)
  % read header
  fprintf('%s: reading header for %s...\n',mfilename,datafile);
  hdr = ts_read_fif_header(datafile,1);
end

% read badchan file
labels = hdr.sensors.label; 
if ~isempty(badchanfile)
  badchan_i = ts_read_txt_badchans(badchanfile,labels);
else
  badchan_i = [];
end;
badchans = unique([badchans,badchan_i]);

% check bad chans are in bounds
if ~isempty(badchans)
  badchans = badchans(union(find(badchans>0),find(badchans<=hdr.nChans)));
end;
% make sure there are some good channels left
goodchans = setdiff([1:hdr.nChans],badchans);
if isempty(goodchans)
  error('no good channels specified');
end;

% convert from msec to samples and introduce stim_delay
prestim_samp  = round((prestim_dur - stim_delay) * hdr.sfreq/1000);
poststim_samp = round((poststim_dur + stim_delay) * hdr.sfreq/1000);
time_orig = [-prestim_samp:poststim_samp]/hdr.sfreq - stim_delay/1000;

% account for downsampling
sfreq_ds = hdr.sfreq/dsfact;
time = downsample(time_orig,dsfact);
num_samples = length(time);

% find sample closest in time to that desired for baseline and noise
[tmp,baseline_start_samp] = min(abs(time-baseline_start/1000));
[tmp,baseline_end_samp] = min(abs(time-baseline_end/1000));

% make sure events have proper fields
if isempty(evnts)
  error('evnts structure is empty');
end;
if ~isfield(evnts, 'type') | ~isfield(evnts, 'latency') | ...
   ~isfield(evnts, 'duration') | ~isfield(evnts, 'condition')
  error('events structure does not have correct fields');
end;
% sort evnts by latency
[slat, indx] = sort([evnts.latency]);
evnts = evnts(indx);
% separate evnts by type
skip_i = find(strcmp('skip',{evnts.type}));
reject_i = find(strcmp('reject',{evnts.type}));
other_i = setdiff(1:length(evnts),union(skip_i,reject_i));
skip_evnts = evnts(skip_i);
reject_evnts = evnts(reject_i);
evnts = evnts(other_i);
skips_beg   = cell2mat({skip_evnts.latency});
skips_end   = skips_beg + cell2mat({skip_evnts.duration}) - 1;
rejects_beg = cell2mat({reject_evnts.latency});
rejects_end = rejects_beg + cell2mat({reject_evnts.duration}) - 1;
evnts_lats  = cell2mat({evnts.latency});
% make sure event conditions are numeric
for evnum=1:length(evnts)
  if ~isnumeric(evnts(evnum).condition) | size(evnts(evnum).condition)~=1
    error('non-numeric event code found for event %d',evnum);
  end;
end;
% make list of unique event codes
event_codes = unique(cell2mat({evnts.condition}));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% initialize output_data structure;
%output_data.subject_id = ''; % let user set this or somehow get from fif?
%output_data.date = ''; % how to get this from fif?
output_data.num_sensors = hdr.nChans;
output_data.sfreq = sfreq_ds;
output_data.sensor_info = [];
for k = 1:hdr.nChans
  output_data.sensor_info(k).typestring = hdr.sensors.typestring{k};
  output_data.sensor_info(k).label = hdr.sensors.label{k};
  output_data.sensor_info(k).loc = hdr.sensors.loc{k};
  output_data.sensor_info(k).badchan = 0;
  output_data.sensor_info(k).type = hdr.sensors.type(k);
  output_data.sensor_info(k).kind = hdr.sensors.kind(k);
  output_data.sensor_info(k).lognum = hdr.sensors.lognum(k);
end;
for b = 1:length(badchans)
  k = badchans(b);
  output_data.sensor_info(k).badchan = 1;
end;  
output_data.coor_trans = [];
if readtrans
  output_data.coor_trans.device2head = loadtrans(datafile); % Uutela's fiff access toolbox meg_pd
else
  output_data.coor_trans.device2head = [];
end;
output_data.coor_trans.mri2head = [];
% initialize averages/epochs
if save_epochs
  for j=1:length(event_codes),
    output_data.epochs(j).event_code=event_codes(j);
    output_data.epochs(j).num_trials=0;
    output_data.epochs(j).num_rejects.mag=0;
    output_data.epochs(j).num_rejects.grad=0;
    output_data.epochs(j).num_rejects.eeg=0;
    output_data.epochs(j).num_rejects.eog=0;
    output_data.epochs(j).num_rejects.manual=0;
    output_data.epochs(j).num_rejects.skip=0;
    output_data.epochs(j).trial_info = [];
    output_data.epochs(j).time=time;
    output_data.epochs(j).data   = [];
  end
else
  data = zeros(hdr.nChans,num_samples);
  for j=1:length(event_codes),
    output_data.averages(j).event_code=event_codes(j);
    output_data.averages(j).num_trials=0;
    output_data.averages(j).num_rejects.mag=0;
    output_data.averages(j).num_rejects.grad=0;
    output_data.averages(j).num_rejects.eeg=0;
    output_data.averages(j).num_rejects.eog=0;
    output_data.averages(j).num_rejects.manual=0;
    output_data.averages(j).num_rejects.skip=0;
    output_data.averages(j).trial_info = [];
    output_data.averages(j).time   = time;
    output_data.averages(j).data   = data;
    output_data.averages(j).stdev  = data;
  end
end;
output_data.noise = [];
output_data.noise.num_trials = 0;
output_data.noise.num_samples = 0;
output_data.noise.covar = zeros(hdr.nChans,hdr.nChans);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% determine which channels are which type
mag_i = find(strcmp('mag',{hdr.sensors.typestring{:}}));
grad_i = find(strncmp('grad',{hdr.sensors.typestring{:}},4));
eeg_i = find(strcmp('eeg',{hdr.sensors.typestring{:}}));
eog_i = find(strcmp('eog',{hdr.sensors.typestring{:}}));
% generate rejection thresholds for each channel
reject_thresh = zeros(hdr.nChans,1);
reject_thresh(mag_i)  = g.reject_mag/PRESCALE_MAG;
reject_thresh(grad_i) = g.reject_grad/PRESCALE_GRAD;
reject_thresh(eeg_i)  = g.reject_eeg/PRESCALE_EEG;
reject_thresh(eog_i)  = g.reject_eog/PRESCALE_EOG;
reject_thresh(find(reject_thresh<=0)) = inf;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% read data
fprintf('%s: reading data from file %s...\n',mfilename,datafile);
noise_matrix = [];
evnum = 0;
while evnum < length(evnts)
  evnum = evnum + 1;
  j = find(event_codes==evnts(evnum).condition);
  begsamp = evnts(evnum).latency - prestim_samp;
  endsamp = evnts(evnum).latency + poststim_samp;

  % read data around the stimulus epoch to reduce ringing from the filter
  num_stimsamps = endsamp - begsamp + 1;
  if bandpass
    read_begsamp = begsamp - num_stimsamps;
    read_endsamp = endsamp + num_stimsamps;
  else
    read_begsamp = begsamp;
    read_endsamp = endsamp;
  end;

  if(read_begsamp < 1)
    continue;
  end;
  if(read_endsamp >= hdr.tlast*hdr.sfreq)
    fprintf('%s: reached end of file\n',mfilename);
    break;
  end;

  % read to end of buffer that read_endsamp is in
  % must treat skips and data buffers differently
  skip_i = find(hdr.skips<=read_endsamp);
  num_samps = read_endsamp - length(skip_i)*SKIP_LENGTH;
  % calculate number of regular (non-skip) buffers
  num_buffs = ceil(num_samps/hdr.nSamples);
  % round up to end of buffer
  num_samps = num_buffs*hdr.nSamples;
  % add back in skips
  num_samps = num_samps + length(skip_i)*SKIP_LENGTH;
  read_endsamp = num_samps;
  
  % add event to trial_info
  if save_epochs
    output_data.epochs(j).trial_info(end+1).number = evnum;
    output_data.epochs(j).trial_info(end).latency  = evnts(evnum).latency;
    output_data.epochs(j).trial_info(end).badtrial = 0;
    if isfield(output_data.epochs(j).trial_info,'epochnum')
      output_data.epochs(j).trial_info(end).epochnum = max([output_data.epochs(j).trial_info.epochnum]) + 1;
    else
      output_data.epochs(j).trial_info(end).epochnum = 1;
    end
  else
    output_data.averages(j).trial_info(end+1).number = evnum;
    output_data.averages(j).trial_info(end).latency  = evnts(evnum).latency;
    output_data.averages(j).trial_info(end).badtrial = 0;
    if isfield(output_data.averages(j).trial_info,'epochnum')
      output_data.averages(j).trial_info(end).epochnum = max([output_data.averages(j).trial_info.epochnum]) + 1;
    else
      output_data.averages(j).trial_info(end).epochnum = 1;
    end    
  end

  % check for skip
  skip_i = find((skips_beg >= read_begsamp & skips_beg <= read_endsamp) | ...
                (skips_end >= read_begsamp & skips_end <= read_endsamp));
  if ~isempty(skip_i)
    if save_epochs
      output_data.epochs(j).num_rejects.skip=...
        output_data.epochs(j).num_rejects.skip + 1;
    else
      output_data.averages(j).num_rejects.skip=...
        output_data.averages(j).num_rejects.skip + 1;
    end;
    continue;
  end;

  % check for manual reject
  reject_i = find((rejects_beg >= begsamp & rejects_beg <= endsamp) | ...
                (rejects_end >= begsamp & rejects_end <= endsamp));
  if ~isempty(reject_i)
    if save_epochs
      output_data.epochs(j).num_rejects.manual=...
        output_data.epochs(j).num_rejects.manual + 1;
    else
      output_data.averages(j).num_rejects.manual=...
        output_data.averages(j).num_rejects.manual + 1;
    end;
    continue;
  end;

  % read selected samples from file
  [data,eofstatus] = ...
    ts_read_fif_data(datafile,hdr,read_begsamp,read_endsamp);
  if(eofstatus)
    fprintf('%s: reached end of file\n',mfilename);
    break;
  end

  % make tmpevnts containing events within read data
  % (purpose is to reduce unnecessary rereading of buffers)
  tmp_evnts_i = find((evnts_lats > read_begsamp & evnts_lats < read_endsamp));
  tmp_evnts = [];
  for tmp_evnum=1:length(tmp_evnts_i)
    reject_event_flag = 0;
    begsamp = evnts(tmp_evnts_i(tmp_evnum)).latency - prestim_samp;
    endsamp = evnts(tmp_evnts_i(tmp_evnum)).latency + poststim_samp;
    if bandpass
      % make sure enough time will be read to get pre- and post-read buffers
      tmp_read_begsamp = begsamp - num_stimsamps;
      tmp_read_endsamp = endsamp + num_stimsamps;
    else
      tmp_read_begsamp = begsamp;
      tmp_read_endsamp = endsamp;
    end;
    if(tmp_read_begsamp >= read_begsamp & tmp_read_endsamp <= read_endsamp)
      tmp_evnts = [tmp_evnts evnts(tmp_evnts_i(tmp_evnum))];
    end;
  end;

  % bandpass filter
  % todo: optional notch filter
  if bandpass
    data = detrend(data')';
    data = ts_freq_filt(data',hdr.sfreq,[bandpass_low_cf,bandpass_high_cf],...
      [bandpass_low_tb,bandpass_high_tb],'bandpass')';
    if isempty(data)
      error('error filtering data');
    end;
  end;

  % zero bad channels
  data(badchans,:) = 0;

  % cycle through all tmpevnts
  for tmp_evnum=1:length(tmp_evnts)
    if save_epochs &&...
       output_data.epochs(j).num_trials>=max_num_trials
      break;
    end;

    j = find(event_codes==tmp_evnts(tmp_evnum).condition);
    begsamp = tmp_evnts(tmp_evnum).latency - prestim_samp;
    endsamp = tmp_evnts(tmp_evnum).latency + poststim_samp;

    if tmp_evnum>1
      % check for manual reject
      reject_i = find((rejects_beg >= begsamp & rejects_beg <= endsamp) | ...
                    (rejects_end >= begsamp & rejects_end <= endsamp));
      if ~isempty(reject_i)
        reject_event_flag = 1;
        if save_epochs
          output_data.epochs(j).num_rejects.manual=...
            output_data.epochs(j).num_rejects.manual + 1;
        else
          output_data.averages(j).num_rejects.manual=...
            output_data.averages(j).num_rejects.manual + 1;
        end;
        continue;
      end;
    end;

    % resize to desired stimulus epoch
    endsamp = endsamp - read_begsamp + 1;
    begsamp = begsamp - read_begsamp + 1;
    tmp_data = data(:,begsamp:endsamp);

    % downsample
    if dsfact~=1
      tmp_data = downsample(tmp_data',dsfact)';
      tmp_nsamp = size(tmp_data,2);
      if tmp_nsamp<num_samples
        tmp_data(:,tmp_nsamp+1:num_samples)=zeros(1,num_samples-tmp_nsamp);
      end;
    end;

    % linear trend removal
    if detrend_events
      tmp_data = detrend(tmp_data')';
    end;

    % baseline correction
    if baseline_sub
      mean_baseline = mean(tmp_data(:,baseline_start_samp:baseline_end_samp),2);
      tmp_data = tmp_data - mean_baseline*ones(1,num_samples);
    end;

    % automatic artifact rejection
    [reject_chans,reject_samples] = ...
      find(abs(tmp_data)>...
        reject_thresh*ones(1,num_samples));

    % classify rejects
    if ~isempty(reject_chans)
      reject_event_flag = 1;
      k=reject_chans(1);
      if save_epochs
        switch hdr.sensors.typestring{k}
        case 'mag'
          output_data.epochs(j).num_rejects.mag=...
            output_data.epochs(j).num_rejects.mag + 1;
        case {'grad1','grad2'}
          output_data.epochs(j).num_rejects.grad=...
            output_data.epochs(j).num_rejects.grad + 1;
        case 'eeg'
          output_data.epochs(j).num_rejects.eeg=...
            output_data.epochs(j).num_rejects.eeg + 1;
        case 'eog'
          output_data.epochs(j).num_rejects.eog=...
            output_data.epochs(j).num_rejects.eog + 1;
        end;
        output_data.epochs(j).trial_info(end).badtrial = 1;
        output_data.epochs(j).trial_info(end).epochnum = output_data.epochs(j).trial_info(end).epochnum - 1;
      else
        switch hdr.sensors.typestring{k}
        case 'mag'
          output_data.averages(j).num_rejects.mag=...
            output_data.averages(j).num_rejects.mag + 1;
        case {'grad1','grad2'}
          output_data.averages(j).num_rejects.grad=...
            output_data.averages(j).num_rejects.grad + 1;
        case 'eeg'
          output_data.averages(j).num_rejects.eeg=...
            output_data.averages(j).num_rejects.eeg + 1;
        case 'eog'
          output_data.averages(j).num_rejects.eog=...
            output_data.averages(j).num_rejects.eog + 1;
        end;
        output_data.averages(j).trial_info(end).badtrial = 1;
        output_data.averages(j).trial_info(end).epochnum = output_data.averages(j).trial_info(end).epochnum - 1;
      end;
    end;
    if ~reject_event_flag % add to data matrices only if not rejected
      if save_epochs
        % add data to epoch struct
        output_data.epochs(j).num_trials = output_data.epochs(j).num_trials + 1;
        output_data.epochs(j).data(:,:,output_data.epochs(j).num_trials) = tmp_data;
      else
        % add data to average struct
        output_data.averages(j).data       = output_data.averages(j).data + tmp_data;
        output_data.averages(j).stdev      = output_data.averages(j).stdev + tmp_data.*tmp_data;
        output_data.averages(j).num_trials = output_data.averages(j).num_trials + 1;
      end;

      % add data to noise matrix
      ex=find(ncov_ex_evnts==tmp_evnts(tmp_evnum).condition);
      if isempty(ex)
        noise = tmp_data(:,baseline_start_samp:baseline_end_samp);
        nsamps = size(noise,2);
        noise = noise - mean(noise,2)*ones(1,nsamps);
        if concat_ncov_flag
          if size(noise_matrix,2) < MAX_NOISE_SAMPLES
            noise_matrix = [noise_matrix noise];
            output_data.noise.num_trials = output_data.noise.num_trials + 1;
            output_data.noise.num_samples = output_data.noise.num_samples + nsamps;
          end;
        else
          output_data.noise.covar = output_data.noise.covar + cov(noise');
          output_data.noise.num_trials = output_data.noise.num_trials + 1;
          output_data.noise.num_samples = output_data.noise.num_samples + nsamps;
        end;
      end;
    end;
    
    if tmp_evnum>1 % more than one event in tmp_evnts
      % add one to evnum to keep track that we are processing this one now
      evnum = evnum+1; 
    end;
  end;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~save_epochs
  % calculate averages from sums
  for j=1:length(event_codes)
    N = output_data.averages(j).num_trials;
    if (N>0)
      % calculate average
      output_data.averages(j).data = ...
        output_data.averages(j).data / N;
    end;
    if (N>1)
      % calculate standard deviation
      output_data.averages(j).stdev = ...
        sqrt((output_data.averages(j).stdev - N*output_data.averages(j).data)/(N-1));
    end;
  end;
end;

% calculate noise covariance matrix
if concat_ncov_flag
  if ~isempty(noise_matrix)
    output_data.noise.covar = cov(noise_matrix');
  end;
else
  output_data.noise.covar = output_data.noise.covar/output_data.noise.num_trials;
end;

fprintf('%s: finished\n',mfilename);
