function status = fs_mktouchfiles(subj,varargin);
%function status = fs_mktouchfiles(subj,[options]);
%
% Usage:
%  status = fs_mktouchfiles(subj,'key1', value1,...);
%
% Required input:
%  subj is a string specifying the subject name
%
% Optional parameters:
%  'hemi' - should be either 'lh' for left hemisphere or 'rh' for right hemi
%    {default = both}
%  'subjdir' - subjects directory (override SUBJECTS_DIR environment variable)
%    subjdir/subj should contain the freesurfer subject directory
%    {default = $SUBJECTS_DIR}
%  'what' - string specifying what action to take
%    'all': make all touchfiles
%    'allsurfbutfinal': make all surface touchfiles but final surfs touchfiles
%    'longitudinalwarp':  make all surface touchfiles but final surfs touchfiles
%       including sphere and aparc
%    {default: 'all'}
%
% Output:
%  status: returns 1 if ERROR, 0 otherwise
%
% created:  06/21/07 by Don Hagler
% last mod: 08/19/07 by Don Hagler
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

status = 0;
result = [];

full_touchlist = {...
'aparc2aseg.touch'...
'brain_finalsurfs.touch'...
'ca_label.touch'...
'ca_normalize.touch'...
'ca_register.touch'...
'ca_register_inv.touch'...
'conform.touch'...
'convert_input.touch'...
'em_register.touch'...
'fill.touch'...
'inorm1.touch'...
'inorm2.touch'...
'lh.aparc.touch'...
'lh.aparc2.touch'...
'lh.aparcstats.touch'...
'lh.aparcstats2.touch'...
'lh.avgcurv.touch'...
'lh.cortical_ribbon.touch'...
'lh.final_surfaces.touch'...
'lh.inflate1.touch'...
'lh.inflate2.touch'...
'lh.qsphere.touch'...
'lh.smoothwm1.touch'...
'lh.smoothwm2.touch'...
'lh.sphmorph.touch'...
'lh.sphreg.contra.touch'...
'lh.sphreg.touch'...
'lh.tessellate.touch'...
'lh.topofix.touch'...
'mri_remove_neck.touch'...
'nu.touch'...
'rh.aparc.touch'...
'rh.aparc2.touch'...
'rh.aparcstats.touch'...
'rh.aparcstats2.touch'...
'rh.avgcurv.touch'...
'rh.cortical_ribbon.touch'...
'rh.final_surfaces.touch'...
'rh.inflate1.touch'...
'rh.inflate2.touch'...
'rh.qsphere.touch'...
'rh.smoothwm1.touch'...
'rh.smoothwm2.touch'...
'rh.sphmorph.touch'...
'rh.sphreg.contra.touch'...
'rh.sphreg.touch'...
'rh.tessellate.touch'...
'rh.topofix.touch'...
'segstats.touch'...
'skull.lta.touch'...
'skull_strip.touch'...
'talairach.touch'...
'wmsegment.touch'...
};

allsurfbutfinal_touchlist = {...
'lh.inflate1.touch'...
'lh.qsphere.touch'...
'lh.smoothwm1.touch'...
'lh.tessellate.touch'...
'lh.topofix.touch'...
'rh.inflate1.touch'...
'rh.qsphere.touch'...
'rh.smoothwm1.touch'...
'rh.tessellate.touch'...
'rh.topofix.touch'...
'skull.lta.touch'...
'skull_strip.touch'...
};

longitudinalwarp_touchlist = {...
'lh.aparc.touch'...
'lh.aparc2.touch'...
'lh.inflate1.touch'...
'lh.qsphere.touch'...
'lh.smoothwm1.touch'...
'lh.tessellate.touch'...
'lh.topofix.touch'...
'lh.sphmorph.touch'...
'lh.sphreg.contra.touch'...
'lh.sphreg.touch'...
'rh.aparc.touch'...
'rh.aparc2.touch'...
'rh.inflate1.touch'...
'rh.qsphere.touch'...
'rh.smoothwm1.touch'...
'rh.tessellate.touch'...
'rh.topofix.touch'...
'rh.sphmorph.touch'...
'rh.sphreg.contra.touch'...
'rh.sphreg.touch'...
'skull.lta.touch'...
'skull_strip.touch'...
};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parse options

try
  options = varargin;
  for index = 1:length(options)
      if iscell(options{index}) & ~iscell(options{index}{1}), options{index} = { options{index} }; end;
  end;
  if ~isempty( varargin ), g=struct(options{:}); 
  else g = []; end;
catch
  error('calling convention {''key'', value, ... } ERROR\n');
end;

if ~isfield(g,'hemi'), g.hemi = []; end;
if ~isfield(g,'subjdir'), g.subjdir = []; end;
if ~isfield(g,'what'), g.what = 'all'; end;

gfields = fieldnames(g);
for index=1:length(gfields)
   switch gfields{index}
   case {'hemi' 'subjdir' 'what'},;
   otherwise, error([mfilename ': unrecognized option: ''' gfields{index} '''' ]);
   end;
end;

% get rid of options struct
hemi = g.hemi;
subjdir = g.subjdir;
what = g.what;
clear g;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% check parameters
if nargin<1, help(mfilename); return; end;  

if ~exist('subjdir','var'), subjdir = []; end;
if isempty(subjdir)
  subjdir = getenv('SUBJECTS_DIR');
  if isempty(subjdir)
    error('SUBJECTS_DIR not defined as an environment variable');
  end;
end;

if isempty(hemi)
  hemilist = {'lh','rh'};
else
  if ~ismember(hemi,{'lh','rh'})
    error(sprintf('hemi must be lh or rh (is %s)\n',hemi));
  end;
  hemilist = {hemi};
end;

touchdir = sprintf('%s/%s/touch',subjdir,subj);
if ~exist(touchdir,'dir')
  error('touch dir %s not found',touchdir);
end

if ~ismember(what,{'list','all','allsurfbutfinal','longitudinalwarp'})
  error('''what'' must be ''list'', ''all'', ''allsurfbutfinal'', or ''longitudinalwarp''');
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

flist = [];
switch what
  case 'all' % create all touch files
    flist = full_touchlist;
  case 'allsurfbutfinal' % create all touch files except for those for final surfs
    flist = allsurfbutfinal_touchlist;
  case 'longitudinalwarp' % create all touch files except for those for final surfs
    % but include sphere and aparc
    flist = longitudinalwarp_touchlist;
end;

for f=1:length(flist)
  fname = [touchdir '/' flist{f}]; 
  if ~exist(fname,'file')
    [status,result] = unix(sprintf('touch %s',fname));
    if status, disp(result); return; end;
  end;
end;
